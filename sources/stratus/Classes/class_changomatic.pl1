/*
 *   class_changomatic.pl1
 *
 *   Changomatic object behavior module for MicroCosm(TM).
 *
 *   Chip Morningstar
 *   Lucasfilm Ltd.
 *   19-June-1986
 */

%include 'microcosm.incl.pl1';
%include 'defs_helper.incl.pl1';
%include 'defs_action.incl.pl1';

initialize_class_changomatic: procedure;

     %replace CHANGOMATIC_REQUESTS by 4;

     declare a(0:CHANGOMATIC_REQUESTS) entry based;
     declare class_changomatic_actions pointer;
     declare 1 changomatic based %include struct_changomatic;

     %replace I by CLASS_CHANGOMATIC;

     Class_Table(I).capacity = 0;
     Class_Table(I).max_requests = CHANGOMATIC_REQUESTS;
     Class_Table(I).alloc_size = size(changomatic);
     Class_Table(I).pc_state_bytes = 0;
     Class_Table(I).known = true;
     Class_Table(I).opaque_container = false;
     Class_Table(I).filler = false;

     allocate a set(class_changomatic_actions);
     Class_Table(I).actions = class_changomatic_actions;

     Class_Table(I).actions->a(HELP)   = generic_HELP;       /* 0 */
     Class_Table(I).actions->a(GET)    = generic_GET;        /* 1 */
     Class_Table(I).actions->a(PUT)    = generic_PUT;        /* 2 */
     Class_Table(I).actions->a(THROW)  = generic_THROW;      /* 3 */
     Class_Table(I).actions->a(CHANGE) = changomatic_CHANGE; /* 4 */

end initialize_class_changomatic;

changomatic_CHANGE: procedure;
     declare target_id binary(15);
     declare 1 target based(targetptr) %include struct_gen_object;
     declare targetptr pointer;
     declare back binary(15);
     declare map_table(0:3) static binary(15) init(4, 1, 2, 3);

     target_id = rank(request(FIRST));
     targetptr = ObjList(target_id);
     back = current_region.orientation;
     if (((current_region.owner = avatar.obj_id | Region = avatar.turf) &
                changeable(targetptr)) |
               (current_region.neighbor(map_table(back)) = avatar.turf &
                neighbor_changeable(targetptr))) then do;
foon:     target.orientation = target.orientation + 8;
          if (^test_bit(target.orientation, 3)) then
               call clear_bit(target.orientation, 8);
          call clear_bit(target.orientation, 9);
          if (divide(target.orientation, 8, 15) = 15) then goto foon;
          target.gen_flags(MODIFIED) = true;
          call r_msg_2(TRUE, target.orientation);
          call n_msg_2(selfptr, CHANGE$, target_id, target.orientation);
     end; else do;
          call object_say(self.noid, 'You can''t change that here.');
          call r_msg_1(FALSE);
     end;
end changomatic_CHANGE;

changeable: procedure(objptr) returns(bit(1));
     declare 1 object based(objptr) %include struct_gen_object;
     declare objptr pointer;
     declare a(0:1) entry based;

     if (object.class = CLASS_AVATAR) then
          return(false);
     else if (Class_Table(object.class).actions = null()) then
          return(true);
     else if (Class_Table(object.class).max_requests < 1) then
          return(true);
     else if (Class_Table(object.class).actions->a(1) = illegal) then
          return(true);
     else do;
          call trace_msg('changeable: fail, noid = ' || ltrim(object.noid));
          return(false);
     end;
end changeable;

neighbor_changeable: procedure(objptr) returns(bit(1));
     declare 1 object based(objptr) %include struct_gen_object;
     declare objptr pointer;

     return(object.class = CLASS_BUILDING);
end neighbor_changeable;
