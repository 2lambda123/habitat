/*
 *   class_drugs.pl1
 *
 *   Object behavior module for class drugs.
 *
 *   Chip Morningstar
 *   Lucasfilm Ltd.
 *   11-April-1986
 *
 */

%include 'microcosm.incl.pl1';
%include 'defs_helper.incl.pl1';
%include 'defs_action.incl.pl1';

%replace NUMBER_OF_DRUG_EFFECTS by 3;

declare drug_effects(NUMBER_OF_DRUG_EFFECTS) entry variable static;
declare drug_help(NUMBER_OF_DRUG_EFFECTS) character(114) varying static init(
     'Healing pills: good for what ails you.',    /* 1 -- heal_avatar */
     'DANGER!!  POISON!!',                        /* 2 -- poison_avatar */
     'Darkening tablets.'                         /* 3 -- turn_avatar_black */
);

initialize_class_drugs: procedure;

     %replace DRUGS_REQUESTS by 4;

     declare a(0:DRUGS_REQUESTS) entry based;
     declare class_drugs_actions pointer;
     declare 1 drugs based %include struct_drugs;

     %replace I by CLASS_DRUGS;

     Class_Table(I).capacity = 0;
     Class_Table(I).max_requests = DRUGS_REQUESTS;
     Class_Table(I).alloc_size = size(drugs);
     Class_Table(I).pc_state_bytes = 1;
     Class_Table(I).known = true;
     Class_Table(I).opaque_container = false;
     Class_Table(I).filler = false;

     allocate a set(class_drugs_actions);
     Class_Table(I).actions = class_drugs_actions;

     Class_Table(I).actions->a(HELP)  = drugs_HELP;    /* 0 */
     Class_Table(I).actions->a(GET)   = generic_GET;   /* 1 */
     Class_Table(I).actions->a(PUT)   = generic_PUT;   /* 2 */
     Class_Table(I).actions->a(THROW) = generic_THROW; /* 3 */
     Class_Table(I).actions->a(TAKE)  = drugs_TAKE;    /* 4 */

end initialize_class_drugs;

drugs_TAKE: procedure;
     declare 1 self based(selfptr) %include struct_drugs;

     if (self.effect < 1 | NUMBER_OF_DRUG_EFFECTS < self.effect) then
          call trace_msg('drugs_TAKE: drug object ' || ltrim(self.obj_id) ||
               'has illegal effect #' || ltrim(self.effect));
     else if (holding(selfptr) & self.count > 0) then do;
          self.count = self.count - 1;
          self.gen_flags(MODIFIED) = true;
          call n_msg_1(selfptr, TAKE$, avatar.noid);
          call r_msg_1(TRUE);
          if (self.count <= 0) then
               call object_say(self.noid, 'All gone!');
          call drug_effects(self.effect);
          if (self.count <= 0) then
               call destroy_object(self.noid);
          return;
     end;
     call r_msg_1(FALSE);
end drugs_TAKE;

initialize_drugs: procedure;
     drug_effects(1) = heal_avatar;
     drug_effects(2) = poison_avatar;
     drug_effects(3) = turn_avatar_black;
end initialize_drugs;

heal_avatar: procedure;
     avatar.health = 255;
     call object_say(avatar.noid, 'I feel much better now.');
end heal_avatar;

poison_avatar: procedure;
     call object_say(avatar.noid, 'I feel very sick.');
     call kill_avatar(avatarptr);
end poison_avatar;

turn_avatar_black: procedure;
     declare head_noid binary(15);
     declare headptr pointer;
     declare 1 head based(headptr) %include struct_head;

     call object_say(avatar.noid, 'I feel very odd.');
     avatar.customize(1) = 17;
     avatar.customize(2) = 17;
     call b_msg_5(null(), FIDDLE_$, avatar.noid, C64_customize_offset, 2,
          17, 17);
     head_noid = avatar.contents->c(HEAD);
     if (head_noid ^= NULL) then do;
          headptr = ObjList(head_noid);
          head.gen_flags(MODIFIED) = true;
          head.orientation = and_bit(head.orientation, '10000111'b);
          head.orientation =  or_bit(head.orientation, '00001000'b);
          call b_msg_4(null(), FIDDLE_$, head_noid, C64_orient_offset, 1,
               head.orientation);
     end;
end turn_avatar_black;

drugs_vendo_info: procedure(drugsptr) returns(character(114) varying);
     declare drugsptr pointer;
     declare 1 drugs based(drugsptr) %include struct_drugs;

     if (drugs.effect < 1) then
          return('Illegal drugs.');
     else if (drugs.effect > NUMBER_OF_DRUG_EFFECTS) then
          return('DRUGS, no information available (yet).');
     else
          return(drug_help(drugs.effect));
end drugs_vendo_info;

drugs_HELP: procedure;
     declare 1 self based(selfptr) %include struct_drugs;

     if (self.effect < 1 | self.effect > NUMBER_OF_DRUG_EFFECTS) then
          call r_msg_s('Illegible Latin scrawl.');
     else do;
          call r_msg_s('DRUGS: select DO to consume.  This pill bottle has '
               || ltrim(self.count) || ' pills remaining.  This bottle contains:');
          call object_say(self.noid, drug_help(self.effect));
     end;
end drugs_HELP;
