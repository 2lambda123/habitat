/*
 *   class_magic_lamp.pl1
 *
 *   Object behavior module for class magic_lamp.
 *
 *   Chip Morningstar
 *   Lucasfilm Ltd.
 *   12-April-1986
 *   revised 5-February-1987 to include genie timer mechanism -- CM
 *
 */

%include 'microcosm.incl.pl1';
%include 'defs_helper.incl.pl1';
%include 'defs_action.incl.pl1';

initialize_class_magic_lamp: procedure;

     %replace MAGIC_LAMP_REQUESTS by 5;

     declare a(0:MAGIC_LAMP_REQUESTS) entry based;
     declare class_magic_lamp_actions pointer;
     declare 1 magic_lamp based %include struct_magic_lamp;

     %replace I by CLASS_MAGIC_LAMP;

     Class_Table(I).capacity = 0;
     Class_Table(I).max_requests = MAGIC_LAMP_REQUESTS;
     Class_Table(I).alloc_size = size(magic_lamp);
     Class_Table(I).pc_state_bytes = 2;
     Class_Table(I).known = true;
     Class_Table(I).opaque_container = false;
     Class_Table(I).filler = false;

     allocate a set(class_magic_lamp_actions);
     Class_Table(I).actions = class_magic_lamp_actions;

     Class_Table(I).actions->a(HELP)  = generic_HELP;    /* 0 */
     Class_Table(I).actions->a(GET)   = generic_GET;     /* 1 */
     Class_Table(I).actions->a(PUT)   = generic_PUT;     /* 2 */
     Class_Table(I).actions->a(THROW) = generic_THROW;   /* 3 */
     Class_Table(I).actions->a(RUB)   = magic_lamp_RUB;  /* 4 */
     Class_Table(I).actions->a(WISH)  = magic_lamp_WISH; /* 5 */

end initialize_class_magic_lamp;

%replace GENIE_TIMEOUT by 30;     /* 30 seconds */

magic_lamp_RUB: procedure;
     declare result binary(15);
     declare 1 self based(selfptr) %include struct_magic_lamp;
     declare success binary(15);
     declare genie_speech character(256) varying;
     declare 1 timeout_struct based,
          2  type     binary(15),
          2  genie    binary(15);

     if (holding(selfptr) & self.lamp_state = MAGIC_LAMP_WAITING) then do;
          self.lamp_state = MAGIC_LAMP_GENIE;
          self.gr_state = MAGIC_LAMP_GENIE;
          self.wisher = avatar.noid;
          self.gen_flags(MODIFIED) = true;
          success = TRUE;
          allocate timeout_struct set(self.timeout);
          self.timeout->timeout_struct.type = 2;
          self.timeout->timeout_struct.genie = self.noid;
          call Tact(Genie_Gets_Impatient, self.timeout, GENIE_TIMEOUT);
          genie_speech = 'Oh, Master ' ||
               ltrim(UserList(avatar.avatarslot)->u.U_Name) ||
               ', your wish is my command!';
          call n_msg_s(selfptr, RUB$, genie_speech);
     end; else do;
          success = FALSE;
          genie_speech = '';
     end;
     call r_msg_1_s(success, genie_speech);
end magic_lamp_RUB;

magic_lamp_WISH: procedure;
     declare 1 self based(selfptr) %include struct_magic_lamp;
     declare the_wish character(TEXT_LENGTH) varying;

     the_wish = substr(request_string, 1);
     call b_msg_s(avatarptr, SPEAK$, the_wish);
     if (self.wisher = avatar.noid) then do;
          call ClearTactByValue(Genie_Gets_Impatient, self.timeout);
          call message_to_god(selfptr, avatarptr, the_wish);
          call b_msg_s(selfptr, WISH$, 'Well, I''ll see what I can do.');
          call destroy_object(self.noid);
     end; else do;
          call object_broadcast(self.noid,
               'Buzz off creep!  It''s not *your* wish.');
     end;
end magic_lamp_WISH;

Genie_Gets_Impatient: procedure(arg);
     declare arg pointer;
     declare 1 timeout based(arg),
          2  type     binary(15),
          2  genie    binary(15);
     declare 1 self based(selfptr) %include struct_magic_lamp;

     selfptr = ObjList(timeout.genie);
     if (selfptr ^= null()) then do;
          if (self.class = CLASS_MAGIC_LAMP) then do;
               if (timeout.type = 2) then do;
                    call object_broadcast(self.noid,
                         'Come on now, I don''t have all day!');
                    timeout.type = 3;
                    call Tact(Genie_Gets_Impatient, arg, GENIE_TIMEOUT);
                    return;
               end; else do;
                    call b_msg_s(selfptr, WISH$,
                        'Sorry, I just don''t have time for indecisiveness!');
                    call destroy_object(self.noid);
               end;
          end;
     end;
     free arg->timeout;
end Genie_Gets_Impatient;
