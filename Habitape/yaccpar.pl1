/*
     Tricky hacks of the Lucasfilm Games Division, episode 43:

     This is the Unix yacc parser converted to Stratus PL/1.

     Combined with some emacs translation macros, we can now use yacc to
     generate PL/1 stuff.  Ain't life grand?

*/

%include 'y.tab.incl.pl1';
%include 'parse_defs.incl.pl1';

%replace true by '1'b;
%replace false by '0'b;

%replace YYMAXDEPTH by 150;

declare yylval external static binary(31);
declare yyval static binary(31);

%replace YYERRCODE by 256;
%replace YYFLAG by -1000;

/*     parser for yacc output     */


declare yydebug bit(1) static init(false);   /* true for debugging */

declare yyv(0:YYMAXDEPTH) static binary(31); /* where the values are stored */
declare yychar binary(31) static init(-1);   /* current input token number */
declare yynerrs binary(31) static init(0);   /* number of errors */
declare yyerrflag binary(15) static init(0); /* error recovery flag */

yyparse: procedure returns(bit(1));
     declare yys(0:YYMAXDEPTH) binary(15);
     declare (yyj, yym) binary(15);
     declare yypvt binary(15);
     declare (yystate, yyn) binary(15);
     declare yyps binary(15);
     declare yypv binary(15);
     declare yyxi binary(15);

     yystate = 0;
     yychar = -1;
     yynerrs = 0;
     yyerrflag = 0;
     yyps = -1;
     yypv = -1;

yystack:    /* put a state and value onto the stack */

     if (yydebug) then
          put skip edit('state ' || ltrim(yystate) || ', char ' ||
               ltrim(yychar))(a);

     yyps = yyps + 1;
     if (yyps > YYMAXDEPTH) then do;
          call yyerror('parser stack overflow');
          return(true);
     end;
     yys(yyps) = yystate;
     yypv = yypv + 1;
     yyv(yypv) = yyval;

yynewstate:

     yyn = yypact(yystate);

     if (yyn <= YYFLAG) then goto yydefault; /* simple state */

     if (yychar < 0) then do;
          yychar = yylex();
          if (yychar < 0) then
               yychar = 0;
     end;
     yyn = yyn + yychar;
     if (yyn < 0 | yyn >= YYLAST) then goto yydefault;

     yyn = yyact(yyn);
     if (yychk(yyn) = yychar) then do; /* valid shift */
          yychar = -1;
          yyval = yylval;
          yystate = yyn;
          if (yyerrflag > 0) then yyerrflag = yyerrflag - 1;
          goto yystack;
     end;

 yydefault:
     /* default state action */

     yyn = yydef(yystate);
     if (yyn = -2) then do;
          if (yychar < 0) then do;
               yychar = yylex();
               if (yychar < 0) then
                    yychar = 0;
          end;
          /* look through exception table */

          yyxi = 0;
          do while (yyexca(yyxi) ^= -1 | yyexca(yyxi+1) ^= yystate);
               yyxi = yyxi + 2;
          end;

          yyxi = yyxi + 2;
          do while (yyexca(yyxi) >= 0);
               if (yyexca(yyxi) = yychar) then
                    goto break;
               yyxi = yyxi + 2;
          end;
break:
          yyn = yyexca(yyxi + 1);
          if (yyn < 0 ) then return(false);   /* accept */
     end;

     if (yyn = 0) then do; /* error */
          /* error ... attempt to resume parsing */

          goto case(yyerrflag);

          case(0):   /* brand new error */
               call yyerror('syntax error');
          yyerrlab:
               yynerrs = yynerrs + 1;

          case(1): ;
          case(2): /* incompletely recovered error ... try again */
               yyerrflag = 3;

               /* find a state where "error" is a legal shift action */

               do while (yyps >= 0);
                    yyn = yypact(yys(yyps)) + YYERRCODE;
                    if (yyn >= 0 & yyn < YYLAST & yychk(yyact(yyn)) = YYERRCODE) then do;
                         yystate = yyact(yyn);  /* simulate a shift of "error" */
                         goto yystack;
                    end;
                    yyn = yypact(yys(yyps));

                    /* the current yyps has no shift onn "error", pop stack */

                    if (yydebug) then
                         put skip edit('error recovery pops state ' || ltrim(yys(yyps)) || ', uncovers ' || ltrim(yys(yyps-1)))(a);

                    yyps = yyps - 1;
                    yypv = yypv - 1;
               end;

               /* there is no state on the stack with an error shift ... abort */

     yyabort:
               return(true);


          case(3):  /* no shift yet; clobber input char */

     yyabort:
               return(true);


          case(3):  /* no shift yet; clobber input char */

               if (yydebug) then
                    put skip edit('error recovery discards char ' || ltrim(yychar))(a);

               if (yychar = 0) then goto yyabort; /* don't discard EOF, quit */
               yychar = -1;
               goto yynewstate;   /* try again in the same state */

     end;

     /* reduction by production yyn */

     if (yydebug) then
          put skip edit('reduce ' || ltrim(yyn))(a);
     yyps = yyps - yyr2(yyn);
     yypvt = yypv;
     yypv = yypv - yyr2(yyn);
     yyval = yyv(yypv + 1);
     yym = yyn;
          /* consult goto table to find next state */
     yyn = yyr1(yyn);
     yyj = yypgo(yyn) + yys(yyps) + 1;
     yystate = yyact(yyj);
     if (yyj >= YYLAST | yychk(yystate) ^= -yyn) then
          yystate = yyact(yypgo(yyn));
     goto casex(yym);
          /* &&&! put yacc output stuff here */
endcases:
     goto yystack;  /* stack new state and v
     if (yyj >= YYLAST | yychk(yystate) ^= -yyn) then
          yystate = yyact(yypgo(yyn));
     goto casex(yym);
          /* &&&! put yacc output stuff here */
endcases:
     goto yystack;  /* stack new state and value */
end yyparse;
