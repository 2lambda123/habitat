/*
 *   class_grenade.pl1
 *
 *   Object behavior module for class grenade.
 *
 *   Chip Morningstar
 *   Lucasfilm Ltd.
 *   11-April-1986
 *   revised 27-July-1987 to include timer mechanims -- CM
 *
 */

%include 'microcosm.incl.pl1';
%include 'defs_helper.incl.pl1';
%include 'defs_action.incl.pl1';

initialize_class_grenade: procedure;

     %replace GRENADE_REQUESTS by 4;

     declare a(0:GRENADE_REQUESTS) entry based;
     declare class_grenade_actions pointer;
     declare 1 grenade based %include struct_grenade;

     %replace I by CLASS_GRENADE;

     Class_Table(I).capacity = 0;
     Class_Table(I).max_requests = GRENADE_REQUESTS;
     Class_Table(I).alloc_size = size(grenade);
     Class_Table(I).pc_state_bytes = 1;
     Class_Table(I).known = true;
     Class_Table(I).opaque_container = false;
     Class_Table(I).filler = false;

     allocate a set(class_grenade_actions);
     Class_Table(I).actions = class_grenade_actions;

     Class_Table(I).actions->a(HELP)    = grenade_HELP;    /* 0 */
     Class_Table(I).actions->a(GET)     = generic_GET;     /* 1 */
     Class_Table(I).actions->a(PUT)     = generic_PUT;     /* 2 */
     Class_Table(I).actions->a(THROW)   = generic_THROW;   /* 3 */
     Class_Table(I).actions->a(PULLPIN) = grenade_PULLPIN; /* 4 */

end initialize_class_grenade;

%replace GRENADE_FUSE_DELAY by 20;

grenade_PULLPIN: procedure;
     declare 1 self based(selfptr) %include struct_grenade;
     declare result binary(15);
     declare success binary(15);
     declare the_grenade based binary(15);
     declare grenadeptr pointer;

     if (current_region.nitty_bits(WEAPONS_FREE)) then do;
        success = FALSE;
        call object_say(self.noid,
         'This is a weapons-free zone.  Your grenade will not operate here.');
     end; else if (holding(selfptr) & self.pinpulled = FALSE) then do;
          self.pinpulled = TRUE;
          self.gen_flags(MODIFIED) = true;
          success = TRUE;
          allocate the_grenade set(grenadeptr);
          grenadeptr->the_grenade = self.noid;
          call object_broadcast(self.noid, 'Sproing!!!');
          call Tact(Grenade_Explosion, grenadeptr, GRENADE_FUSE_DELAY);
     end; else
          success = FALSE;
     call r_msg_1(success);
end grenade_PULLPIN;

%replace SIT_GROUND by 132;
%replace GET_SHOT_POSTURE by 138;

Grenade_Explosion: procedure(arg);
     declare arg pointer;
     declare the_grenade based(arg) binary(15);
     declare 1 self based(selfptr) %include struct_grenade;
     declare targetptr pointer;
     declare 1 target based(targetptr) %include struct_avatar;
     declare result binary(15);
     declare i binary(15);
     declare userptr pointer;
     declare damage_avatar entry(pointer, pointer) returns(binary(15));
     %replace DEATH by 3;

     selfptr = ObjList(the_grenade);
     if (selfptr ^= null()) then do;
          if (self.class = CLASS_GRENADE) then do;
               call b_msg_0(selfptr, EXPLODE_$);
               call destroy_object(self.noid);
               do i = 1 to 6;
                    userptr = UserList(i);
                    if (userptr ^= null()) then do;
                         targetptr = ObjList(userptr->u.object_slot);
                         result = damage_avatar(targetptr, selfptr);
                         if (result > 0) then do;
                              target.activity = SIT_GROUND;
                              call b_msg_1(targetptr, POSTURE$,
                                   GET_SHOT_POSTURE);
                              if (result = DEATH) then
                                   call kill_avatar(targetptr);
                         end;
                    end;
               end;
          end;
     end;
     free arg->the_grenade;
end Grenade_Explosion;

grenade_HELP: procedure;
     declare 1 self based(selfptr) %include struct_grenade;

     if (self.pinpulled ^= TRUE) then
          call r_msg_s('Grenade: Select DO (while holding) to pull pin, then throw to ground and leave the region quickly.');
     else
          call r_msg_s('Grenade: Pin pulled!  Run away now!!!');
end grenade_HELP;
