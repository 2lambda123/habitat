/*
 *   class_ghost.pl1
 *
 *   Ghost object behavior module for MicroCosm(TM).
 *
 *   Chip Morningstar
 *   Lucasfilm Ltd.
 *   22-September-1986
 */

%include 'microcosm.incl.pl1';
%include 'defs_action.incl.pl1';
%include 'defs_helper.incl.pl1';

initialize_class_ghost: procedure;

     %replace GHOST_REQUESTS by 10;

     declare a(0:GHOST_REQUESTS) entry based;
     declare class_ghost_actions pointer;
     declare 1 ghost based %include struct_ghost;

     %replace I by CLASS_GHOST;

     Class_Table(I).capacity = 0;
     Class_Table(I).max_requests = GHOST_REQUESTS;
     Class_Table(I).alloc_size = size(ghost);
     Class_Table(I).pc_state_bytes = 0;
     Class_Table(I).known = true;
     Class_Table(I).opaque_container = false;
     Class_Table(I).filler = false;

     allocate a set(class_ghost_actions);
     Class_Table(I).actions = class_ghost_actions;

     Class_Table(I).actions->a(HELP) = ghost_HELP;            /* 0 */
     Class_Table(I).actions->a(1) = illegal;                  /* 1 */
     Class_Table(I).actions->a(2) = illegal;                  /* 2 */
     Class_Table(I).actions->a(3) = illegal;                  /* 3 */
     Class_Table(I).actions->a(4) = illegal;                  /* 4 */
     Class_Table(I).actions->a(5) = illegal;                  /* 5 */
     Class_Table(I).actions->a(6) = illegal;                  /* 6 */
     Class_Table(I).actions->a(7) = illegal;                  /* 7 */
     Class_Table(I).actions->a(WALK) = ghost_WALK;            /* 8 */
     Class_Table(I).actions->a(NEWREGION) = ghost_NEWREGION;  /* 9 */
     Class_Table(I).actions->a(CORPORATE) = switch_from_ghost;/* 10 */

end initialize_class_ghost;

ghost_WALK: procedure;
     call r_msg_2(self.x, self.y);
end ghost_WALK;

ghost_NEWREGION: procedure;
     declare direction binary(15);
     declare new_region binary(31);
     declare new_entry_mode binary(15);
     declare passage_id binary(15);
     declare passageptr pointer;
     declare 1 passage based(passageptr) %include struct_door;

     direction = rank(request(FIRST));
     passage_id = rank(request(SECOND));
     new_region = 0;
     new_entry_mode = 0;
     if (direction = AUTO_TELEPORT_DIR) then do;
          if (userptr->u.auto_destination ^= 0) then do;
               new_region = userptr->u.auto_destination;
               userptr->u.auto_destination = 0;
               new_entry_mode = userptr->u.auto_mode;
          end; else do;
               /* If we get here the user has hacked his C64.  By executing a
                  return statement here, we don't respond to his message, thus
                  hanging him. */
               call object_say(self.noid, 'Hi hacker!');
               return;
          end;
     end; else do;
          passageptr = ObjList(passage_id);
          if (passageptr ^= null()) then do;
               if (passage.class = CLASS_DOOR |
                         passage.class = CLASS_BUILDING) then do;
                    if (passage.class = CLASS_DOOR) then 
                         if (^test_bit(passage.open_flags, OPEN_BIT) |
                                   passage.gen_flags(
                                   DOOR_GHOST_RESTRICTED_BIT)) then do;
                              call r_msg_1(FALSE);
                              return;
                         end;
                    new_region = passage.connection;
               end;
          end;
     end;
     if (0 <= direction & direction <= 4) then do;
          if (new_region = 0) then
               new_region = current_region.neighbor(mod(direction +
                    current_region.orientation + 2, 4) + 1);
          if (new_region ^= 0 & new_region ^= -1) then do;
               call goto_new_region(selfptr, new_region, direction,
                    new_entry_mode);
               return;
          end;
     end;
     call ghost_say(self.noid, 'There is nowhere to go in that direction.'); 
     call r_msg_1(FALSE);
end ghost_NEWREGION;

ghost_HELP: procedure;
     declare ghosts binary(15);
     declare ghost_count entry(binary(15)) returns(binary(15));

     ghosts = ghost_count(1);
     if (ghosts = 1) then
          call r_msg_s('There is 1 ghost here.');
     else
          call r_msg_s('There are ' || ltrim(ghosts) || ' ghosts here.');
end ghost_HELP;
