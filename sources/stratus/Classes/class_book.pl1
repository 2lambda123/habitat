/*
 *   class_book.pl1
 *
 *   Object behavior module for class book.
 *
 *   Chip Morningstar
 *   Lucasfilm Ltd.
 *   12-April-1986
 *
 */

%include 'microcosm.incl.pl1';
%include 'defs_helper.incl.pl1';
%include 'defs_action.incl.pl1';

initialize_class_book: procedure;

     %replace BOOK_REQUESTS by 4;

     declare a(0:BOOK_REQUESTS) entry based;
     declare class_book_actions pointer;
     declare 1 book based %include struct_book;

     %replace I by CLASS_BOOK;

     Class_Table(I).capacity = 0;
     Class_Table(I).max_requests = BOOK_REQUESTS;
     Class_Table(I).alloc_size = size(book);
     Class_Table(I).pc_state_bytes = 1;
     Class_Table(I).known = true;
     Class_Table(I).opaque_container = false;
     Class_Table(I).filler = false;

     allocate a set(class_book_actions);
     Class_Table(I).actions = class_book_actions;

     Class_Table(I).actions->a(HELP)  = book_HELP;     /* 0 */
     Class_Table(I).actions->a(GET)   = generic_GET;   /* 1 */
     Class_Table(I).actions->a(PUT)   = generic_PUT;   /* 2 */
     Class_Table(I).actions->a(THROW) = generic_THROW; /* 3 */
     Class_Table(I).actions->a(READ)  = book_READ;     /* 4 */

end initialize_class_book;

book_READ: procedure;
     declare 1 self based(selfptr) %include struct_book;
     declare page_to_read binary(15);

     page_to_read = rank(request(FIRST));
     if (page_to_read > self.last_page) then
          page_to_read = 1;
     else if (page_to_read = 0) then
          page_to_read = self.current_page;
     if (holding(selfptr)) then do;
               self.current_page = page_to_read +1;
          call show_text_page (self.text_id,page_to_read,self.current_page);
          end;
     else 
          call r_msg_s(copy(byte(10),16));
end book_READ;

%replace BOOK$HELP by 1;
%replace BOOK$VENDO by 2;
%replace PAPER$HELP by 3;

book_HELP: procedure;
     declare 1 self based(selfptr) %include struct_book;

     call get_title_page(self.text_id, BOOK$HELP);
end book_HELP;

send_book_title: procedure(title, use_flag);
     declare title character(40) varying;
     declare nice_title character(40) varying;
     declare use_flag binary(15);

     nice_title = ltrim(rtrim(title));
     if (use_flag = BOOK$HELP) then do;
          call r_msg_s('BOOK: DO while holding to read the book.');
          if (nice_title = '') then
               call object_say(self.noid, 'This book is untitled.');
          else
               call object_say(self.noid, 'This book is "' || nice_title || '".');
     end; else if (use_flag = BOOK$VENDO) then do;
          if (nice_title = '') then
               call object_say(self.noid, 'This book is untitled.');
          else
               call object_say(self.noid, 'This is "' || nice_title || '".');
     end; else if (use_flag = PAPER$HELP) then do;
          call r_msg_s('PAPER: DO while holding to examine or edit text on sheet of paper.');
          if (nice_title ^= '') then
               call object_say(self.noid, 'This paper begins "' ||
                    nice_title || '".');
     end;
end send_book_title;

book_vendo_info: procedure(bookptr) returns(character(114) varying);
     declare bookptr pointer;
     declare 1 book based(bookptr) %include struct_book;

     call get_title_page(book.text_id, BOOK$VENDO);
     return('BOOK');
end book_vendo_info;
