/*
 *   class_boomerang.pl1
 *
 *   Boomerang object behavior module for MicroCosm(TM).
 *
 *   Chip Morningstar
 *   Lucasfilm Ltd.
 *   12-April-1986
 */

%include 'microcosm.incl.pl1';
%include 'defs_helper.incl.pl1';
%include 'defs_action.incl.pl1';

initialize_class_boomerang: procedure;

     %replace BOOMERANG_REQUESTS by 3;

     declare a(0:BOOMERANG_REQUESTS) entry based;
     declare class_boomerang_actions pointer;
     declare 1 boomerang based %include struct_boomerang;

     %replace I by CLASS_BOOMERANG;

     Class_Table(I).capacity = 0;
     Class_Table(I).max_requests = BOOMERANG_REQUESTS;
     Class_Table(I).alloc_size = size(boomerang);
     Class_Table(I).pc_state_bytes = 0;
     Class_Table(I).known = true;
     Class_Table(I).opaque_container = false;
     Class_Table(I).filler = false;

     allocate a set(class_boomerang_actions);
     Class_Table(I).actions = class_boomerang_actions;

     Class_Table(I).actions->a(HELP)  = generic_HELP;    /* 0 */
     Class_Table(I).actions->a(GET)   = generic_GET;     /* 1 */
     Class_Table(I).actions->a(PUT)   = generic_PUT;     /* 2 */
     Class_Table(I).actions->a(THROW) = boomerang_THROW; /* 3 */

end initialize_class_boomerang;

boomerang_THROW: procedure;
     declare 1 self based(selfptr) %include struct_boomerang;
     declare junk pointer;

     if (holding(selfptr)) then do;
          self.return_to = avatar.noid;
          call n_msg_0(selfptr, THROWAWAY$);
          junk = schedule_event(selfptr, Boomerang_Return,
                                        random_time_in_the_future());
          call disappear_object(self.noid);
     end;
end boomerang_THROW;

Boomerang_Return: procedure;
     declare 1 self based(selfptr) %include struct_boomerang;
     declare 1 whom based(whomptr) %include struct_avatar;
     declare whomptr pointer;
     declare junk pointer;

     whomptr = ObjList(self.return_to);
     if (empty_handed(whomptr)) then
          if (change_containers(self.noid, whom.noid, HANDS, true)) then do; 
               call b_msg_1(selfptr, RETURN$, whom.noid);
               return;
          end;
     junk = schedule_event(selfptr, Boomerang_Return,
                                        random_time_in_the_future());
end Boomerang_Return;
