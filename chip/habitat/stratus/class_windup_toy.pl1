/*
 *   class_windup_toy.pl1
 *
 *   Object behavior module for class windup_toy.
 *
 *   Chip Morningstar
 *   Lucasfilm Ltd.
 *   12-April-1986
 *
 */

%include 'microcosm.incl.pl1';
%include 'defs_helper.incl.pl1';
%include 'defs_action.incl.pl1';

initialize_class_windup_toy: procedure;

     %replace WINDUP_TOY_REQUESTS by 4;

     declare a(0:WINDUP_TOY_REQUESTS) entry based;
     declare class_windup_toy_actions pointer;
     declare 1 windup_toy based %include struct_windup_toy;

     %replace I by CLASS_WINDUP_TOY;

     Class_Table(I).capacity = 0;
     Class_Table(I).max_requests = WINDUP_TOY_REQUESTS;
     Class_Table(I).alloc_size = size(windup_toy);
     Class_Table(I).pc_state_bytes = 1;
     Class_Table(I).known = true;
     Class_Table(I).opaque_container = false;
     Class_Table(I).filler = false;

     allocate a set(class_windup_toy_actions);
     Class_Table(I).actions = class_windup_toy_actions;

     Class_Table(I).actions->a(HELP) = generic_HELP; /* 0 */
     Class_Table(I).actions->a(GET)   = generic_GET;     /* 1 */
     Class_Table(I).actions->a(PUT)   = generic_PUT;     /* 2 */
     Class_Table(I).actions->a(THROW) = generic_THROW;   /* 3 */
     Class_Table(I).actions->a(WIND)  = windup_toy_WIND; /* 4 */

end initialize_class_windup_toy;

windup_toy_WIND: procedure;
     declare 1 self based(selfptr) %include struct_windup_toy;

     if (holding(selfptr)) then do;
          self.wind_level = self.wind_level + 1;
          self.gr_state = 1;
          if (self.wind_level > 4) then
               self.wind_level = 4;
          self.gen_flags(MODIFIED) = true;
          call n_msg_0(selfptr, WIND$);
     end;
     call r_msg_1(TRUE);
end windup_toy_WIND;
